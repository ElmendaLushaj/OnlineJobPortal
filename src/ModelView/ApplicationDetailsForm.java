/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ModelView;

import BLL.Applicant;
import BLL.ApplicationDetails;
import BLL.Job;
import DAL.AppFormException;
import DAL.ApplicantRepository;
import DAL.ApplicationDetailsRepository;
import DAL.JobRepository;
import ModelGiu.ApplicantComboBoxModel;
import ModelGiu.ApplicationDetailsTableModel;
import ModelGiu.JobComboBoxModel;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author DELL
 */
public class ApplicationDetailsForm extends javax.swing.JInternalFrame {

    /**
     * Creates new form ApplicationDetailsForm
     */
    public ApplicationDetailsForm() {
        initComponents();
        loadTable();
        loadComboBox();
        tabelaSelectedIndexChange();
        sort();
    }
    ApplicantRepository ar = new ApplicantRepository();
    ApplicantComboBoxModel acbm = new ApplicantComboBoxModel();
    ApplicationDetailsRepository adr = new ApplicationDetailsRepository();
    ApplicationDetailsTableModel adtm = new ApplicationDetailsTableModel();
    JobRepository jr = new JobRepository();
    JobComboBoxModel jcbm = new JobComboBoxModel();
    
    private void tabelaSelectedIndexChange(){
        final ListSelectionModel rowSM = table3.getSelectionModel();
        rowSM.addListSelectionListener(new ListSelectionListener(){

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(e.getValueIsAdjusting()){
                    return;
                }
                
                ListSelectionModel rowSM = (ListSelectionModel) e.getSource();
                int selectedIndex = rowSM.getAnchorSelectionIndex();
                if(selectedIndex > -1){
                    ApplicationDetails ad = adtm.getApplicationDetails(selectedIndex);
                  
                   jcbm.setSelectedItem(ad.getJobID());
                    jobCBM.repaint();
                    acbm.setSelectedItem(ad.getApplicantID());
                    applicantCBM.repaint();
                }
            }
        });
    }
    
    
    public void loadTable(){
    
     try{
            List<ApplicationDetails> lista = adr.findAll();
            adtm.setPageSize(5);
            adtm.addList(lista);
            
            table3.setModel(adtm);
            adtm.fireTableDataChanged();
        }catch(AppFormException ex){
            Logger.getLogger(EmployerForm.class.getName()).log(Level.SEVERE,null,ex);
        }
    }
       public void loadComboBox(){
        try{
            List <Job> list = jr.findAll();
            jcbm.add(list);
            jobCBM.setModel(jcbm);
            jobCBM.repaint();
            List <Applicant> listaa = ar.findAll();
            acbm.add(listaa);
            applicantCBM.setModel(acbm);
            applicantCBM.repaint();
      
            
          
        }catch(AppFormException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }
     
     public void clear(){
     idField.setText("");
      //employerCBM.setSelectedIndex(-1);
       // employerCBM.repaint();
       jobCBM.setSelectedIndex(-1);
        jobCBM.repaint();
         applicantCBM.setSelectedIndex(-1);
        applicantCBM.repaint();
             
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        saveB = new javax.swing.JButton();
        cancelB = new javax.swing.JButton();
        deleteB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        jobCBM = new javax.swing.JComboBox();
        applicantCBM = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        table3 = new javax.swing.JTable();
        mistake = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        filterF = new javax.swing.JTextField();
        upB = new javax.swing.JButton();
        downB = new javax.swing.JButton();

        saveB.setText("ADD");
        saveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBActionPerformed(evt);
            }
        });

        cancelB.setText("Cancel");
        cancelB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBActionPerformed(evt);
            }
        });

        deleteB.setText("Delete");
        deleteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBActionPerformed(evt);
            }
        });

        jLabel1.setText("Application ID:");

        jLabel2.setText("Job ID:");

        jLabel3.setText("Applicant ID:");

        idField.setEnabled(false);
        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        jobCBM.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jobCBM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jobCBMActionPerformed(evt);
            }
        });
        jobCBM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jobCBMKeyReleased(evt);
            }
        });

        applicantCBM.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        applicantCBM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                applicantCBMKeyReleased(evt);
            }
        });

        table3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table3);

        mistake.setText("jLabel4");

        jLabel4.setText("Filter by text:");

        filterF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterFActionPerformed(evt);
            }
        });
        filterF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterFKeyReleased(evt);
            }
        });

        upB.setText("Previous");
        upB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upBActionPerformed(evt);
            }
        });

        downB.setText("Next");
        downB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteB)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(saveB)
                                    .addComponent(cancelB))
                                .addGap(72, 72, 72)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jobCBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelLayout.createSequentialGroup()
                                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(63, 63, 63)
                                        .addComponent(jLabel3)
                                        .addGap(30, 30, 30)
                                        .addComponent(applicantCBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(mistake, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(105, 105, 105)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filterF, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(190, 190, 190)
                        .addComponent(upB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(downB)))
                .addContainerGap(198, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveB)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(applicantCBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(cancelB))
                    .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jobCBM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(deleteB)
                        .addContainerGap(234, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(mistake, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(jLabel4))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(filterF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(upB)
                                    .addComponent(downB))))
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 4, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBActionPerformed
        // TODO add your handling code here:
        try{
            if(jobCBM.getSelectedIndex() == 0 || applicantCBM.getSelectedIndex() == 0){
            mistake.setText("You should fill all of the above field");
            }else{
            int row = table3.getSelectedRow();
            if(row == -1){
                ApplicationDetails ad = new ApplicationDetails();
               ad.setJobID((Job)jcbm.getSelectedItem());
                ad.setApplicantID((Applicant)acbm.getSelectedItem());
                
                adr.create(ad);
            }
            else{
                ApplicationDetails ad = adtm.getApplicationDetails(row);
               
                ad.setJobID((Job)jcbm.getSelectedItem());
                ad.setApplicantID((Applicant)acbm.getSelectedItem());
                adr.edit(ad);
            }
            clear();
            loadTable();}
        }catch(AppFormException af){
            JOptionPane.showMessageDialog(this , "This data Exists");
        }
    }//GEN-LAST:event_saveBActionPerformed

    private void cancelBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBActionPerformed
        // TODO add your handling code here:
        clear();
    }//GEN-LAST:event_cancelBActionPerformed
    private void sort(){
     TableRowSorter<ApplicationDetailsTableModel> tr;
        tr = new  TableRowSorter<ApplicationDetailsTableModel>((ApplicationDetailsTableModel) table3.getModel());
        table3.setRowSorter(tr);
     
     
     }
     private void filter(String query){
       //DefaultTableModel dtm = (DefaultTableModel)table.getModel();
        TableRowSorter<ApplicationDetailsTableModel> tr;
        tr = new  TableRowSorter<ApplicationDetailsTableModel>((ApplicationDetailsTableModel) table3.getModel());
        table3.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));
        
        
    }
    
    private void deleteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBActionPerformed
        // TODO add your handling code here:
                   int row = table3.getSelectedRow();
        if(row != -1){
        Object [] opsions = {"Yes" , "No"};
        int i = JOptionPane.showOptionDialog(this, "Do you want to delete this Application?", "Deletion", JOptionPane.OK_OPTION, JOptionPane.QUESTION_MESSAGE, null, opsions, opsions[1]);
        if(i == 0){
        ApplicationDetails ad =adtm.getApplicationDetails(row);
        try{
        adr.delete(ad);
        }catch(AppFormException apf){
        JOptionPane.showMessageDialog(this,apf.getMessage());}
                
        clear();
        loadTable();
        }
        }
        else {
         JOptionPane.showMessageDialog(this, "You dind't chose anything to delete");}
    }//GEN-LAST:event_deleteBActionPerformed

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed

    private void jobCBMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobCBMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jobCBMActionPerformed

    private void jobCBMKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jobCBMKeyReleased
mistake.setText(" ");        // TODO add your handling code here:
    }//GEN-LAST:event_jobCBMKeyReleased

    private void applicantCBMKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_applicantCBMKeyReleased
mistake.setText(" ");         // TODO add your handling code here:
    }//GEN-LAST:event_applicantCBMKeyReleased

    private void filterFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterFKeyReleased
        // TODO add your handling code here:
        String query =filterF.getText();
        filter(query);
    }//GEN-LAST:event_filterFKeyReleased

    private void filterFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_filterFActionPerformed

    private void upBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upBActionPerformed
        // TODO add your handling code here:
          ApplicationDetailsTableModel model = (ApplicationDetailsTableModel) table3.getModel();
        model.pageUp();
         if (model.getPageOffset() == 0) {
          upB.setEnabled(false);
        }else{
        downB.setEnabled(true);
      }
    }//GEN-LAST:event_upBActionPerformed

    private void downBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downBActionPerformed
        // TODO add your handling code here:
        ApplicationDetailsTableModel model = (ApplicationDetailsTableModel) table3.getModel();
        model.pageDown();
           // If we hit the bottom of the data, disable the down button.
        if (model.getPageOffset() == (model.getPageCount() - 1)) {
          downB.setEnabled(false);
        }else{
        upB.setEnabled(true);
      }
    }//GEN-LAST:event_downBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox applicantCBM;
    private javax.swing.JButton cancelB;
    private javax.swing.JButton deleteB;
    private javax.swing.JButton downB;
    private javax.swing.JTextField filterF;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox jobCBM;
    private javax.swing.JLabel mistake;
    private javax.swing.JPanel panel;
    private javax.swing.JButton saveB;
    private javax.swing.JTable table3;
    private javax.swing.JButton upB;
    // End of variables declaration//GEN-END:variables
}
